#include <iostream>
#include <Windows.h>
#include <string>
#include <conio.h>
#pragma warning (disable:4996)
using namespace std;
struct CITY
{
	char fio[32];
	char street[18];
	short int home;
	short int flat;
	char data[10];
};
struct Queue
{
	CITY ptr;
	int first, last;
};
void initQ(Queue* q)
{
	q->first = 1;
	q->last = 0;
}
void push_back(Queue* q, CITY& city)
{
	q->last++;
	q[q->last].ptr = city;
}
void printQ(Queue* q)
{
	cout << " | Позиция искомых элементов: | " << endl;
	cout << "---------------------------------------------" << endl;
	for (int i = q->first; i <= q->last; i++)
	{
		cout << "№" << i << ">---";
		cout << "\t" << q[i].ptr.fio << "\t" << q[i].ptr.street << "\t"
			<< q[i].ptr.home << " " << q[i].ptr.flat << " " << q[i].ptr.data << endl;
		cout << endl;
	}
}
void print(CITY* city, int size)
{
	int n = 1, k = 0;
	cout << " | База данных <Населённый пункт>: | " << endl;
	cout << "---------------------------------------------" << endl;
	for (int i = 1; i <= size; i++)
	{
		cout << "№" << i << ">---";
		cout << "\t" << city[i].fio << "\t" << city[i].street << "\t"
			<< city[i].home << " " << city[i].flat << " " << city[i].data << endl;
		cout << endl;
		k++;
		if (k % 20 == 0)
		{
			n++;
			getch();
			system("cls");
		}
	}
	cout << " СТРАНИЦА № " << n << endl;
	cout << "---------------------------------------------" << endl;
}
int compdat(char data1[10], char data2[10])
{
	int d1, d2;
	int m1, m2;
	int y1, y2;
	sscanf(data1, "%d %d %d", &d1, &m1, &y1);
	sscanf(data2, "%d %d %d", &d2, &m2, &y2);
	m1 *= -1;
	m2 *= -1;
	y1 *= -1;
	y2 *= -1;
	if (y1 < y2)
		return 1;
	else if (y1 > y2)
		return -1;
	else if (m1 < m2)
		return 1;
	else if (m1 > m2)
		return -1;
	else if (d1 < d2)
		return 1;
	else if (d1 > d2)
		return -1;
	else return 0;
}

int compdat1(char data[10], int key)
{
	int d;
	int m;
	int y;
	sscanf(data, "%d %d %d", &d, &m, &y);
	y *= -1;
	if (y < key)
		return 1;
	else if (y > key)
		return -1;
	else return 0;
}

void qsort(CITY* mas, int size)
{
	int i = 1;
	int j = size;
	CITY mid = mas[size / 2];
	do
	{
		while (compdat(mas[i].data, mid.data) == 1 || (compdat(mas[i].data, mid.data) == 0 && strcmp(mas[i].street, mid.street) < 0))
		{
			i++;
		}
		while (compdat(mas[j].data, mid.data) == -1 || (compdat(mas[j].data, mid.data) == 0 && strcmp(mas[j].street, mid.street) > 0))
		{
			j--;
		}
		if (i <= j)
		{
			swap(mas[i], mas[j]);
			i++;
			j--;
		}
	} while (i <= j);
	if (j > 0)
	{
		qsort(mas, j + 1);
	}
	if (i <= size)
	{
		qsort(&mas[i], size - 1);
	}
}

int binSearch(CITY* mas, int l, int r, int key)
{
	int mid = 0;
	if (r < l)
		return 1;
	while (l < r)
	{
		mid = l;
		if (compdat1(mas[mid].data, key) == 0)
			return mid;

		if (compdat1(mas[mid].data, key) == 1)
			l = mid + 1;

		if (compdat1(mas[mid].data, key) == -1)
			r = mid - 1;
	}
	return -2;
}

int menu()
{
	int change;
	cout << "Выберите опцию\n" << endl;
	cout << "1. Вывести базу данных\n"
		<< "2. Выполнить сортировку базы\n"
		<< "3. Поиск по ключу поиска\n"
		<< "4. Выход из программы\n" << endl;
	cout << "-> ";
	cin >> change;
	system("cls");
	return change;
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int i = 1, size = 0, change, m = 0, key, search = 0, count = 0;
	CITY* city = new CITY[500];
	Queue* q = new Queue;
	FILE* f = fopen("C:\\Users\\Vl\\Documents\\city.txt", "r");
	char temp[80];
	while (!feof(f))
	{

		fgets(city[i].fio, 31, f);
		fgets(city[i].street, 17, f);
		fscanf(f, "%hd", &city[i].home);
		fscanf(f, "%hd", &city[i].flat);
		fscanf(f, "%s", &city[i].data);
		fgets(temp, 80, f);
		++i; size++;
	}
	fclose(f);
	while (m != 4)
	{
		change = menu();
		switch (change)
		{
		case 1:
			cout << " ...Просмотр базы данных..." << endl;
			print(city, size);
			system("pause");
			system("cls");
			break;
		case 2:
			cout << " ...Выполняем сортировку базы данных ";
			qsort(city, size);
			system("pause");
			system("cls");
			break;
		case 3:
			cout << " ...Выполняется бинарный поиск..." << endl;
			cout << "Введите ключ поиска: "; cin >> key;
			initQ(q);
			while (binSearch(city, search + 1, size, key) != -2)
			{
				count++;
				search = binSearch(city, search + 1, size, key);
				push_back(q, city[search]);
			}
			printQ(q);
			system("pause");
			system("cls");
			break;
		case 4:
			cout << " ...Программа успешно завершена!..." << endl;
			exit(EXIT_SUCCESS);
			break;
		default:
			cout << "Произошла непредвиденная ошибка! Попробуйте заново!" << endl;
			exit(EXIT_FAILURE);
			break;
		}cout << "Для выхода - нажмите 4. Для продолжения - любую клавишу: ";
		cin >> m; system("cls");
	}
	system("pause");
	delete[]city;
	delete[]q;
	return 0;
}
